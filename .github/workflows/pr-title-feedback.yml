# This workflow is triggered when the 'Semantic PR Title Validation' workflow completes.
# It provides feedback on the pull request based on the validation result.
---
name: ‚úçÔ∏è Semantic PR Feedback

on:
  workflow_run:
    workflows: ["üîç Semantic PR Title Validation"]
    types:
      - completed

permissions:
  issues: write

jobs:
  feedback:
    name: Provide Feedback
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request' && github.event.workflow_run.conclusion != 'cancelled'

    steps:
      - name: Get PR Number
        id: get_pr_number
        uses: actions/github-script@v6
        with:
          script: |
            return github.context.payload.workflow_run.pull_requests[0].number

      - name: Handle Invalid Title
        if: github.event.workflow_run.conclusion == 'failure'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ steps.get_pr_number.outputs.result }};
            const commentMarker = '<!-- semantic-pr-comment -->';

            const { data: comments } = await github.rest.issues.listComments({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => comment.body.includes(commentMarker));

            if (!existingComment) {
              const message = `<!-- semantic-pr-comment -->

            Hey there and thank you for your contribution! üëãüèº

            We require pull request titles to follow the [Conventional Commits](https://www.conventionalcommits.org/) specification and it looks like your proposed title needs to be adjusted.

            A valid title has the format: \`type(scope): subject\`

            **type**: Must be one of the following:
              - \`feat\`: A new feature
              - \`fix\`: A bug fix
              - \`docs\`: Documentation only changes
              - \`style\`: Changes that do not affect the meaning of the code (e.g., formatting)
              - \`refactor\`: A code change that neither fixes a bug nor adds a feature
              - \`perf\`: A code change that improves performance
              - \`test\`: Adding missing tests or correcting existing tests
              - \`chore\`: Changes to the build process or auxiliary tools
              - \`build\`: Changes that affect the build system or external dependencies
              - \`ci\`: Changes to CI configuration files and scripts
              - \`revert\`: Reverts a previous commit

            **scope** (optional): A noun describing a section of the codebase.

            **subject**: A short description of the code changes.

            Examples:
              - \`feat(api): add new endpoint for users\`
              - \`fix: incorrect type check in cp command\`
              - \`docs(readme): update installation instructions\`

            Please update your pull request title to match this format.`;

              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

            await github.rest.issues.addLabels({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['invalid']
            });

      - name: Handle Valid Title
        if: github.event.workflow_run.conclusion == 'success'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ steps.get_pr_number.outputs.result }};
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const invalidLabel = labels.find(label => label.name === 'invalid');

            if (invalidLabel) {
              await github.rest.issues.removeLabel({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'invalid',
              });
            }